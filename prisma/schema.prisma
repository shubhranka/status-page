generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // You can use "sqlite", "mysql", etc., depending on your choice.
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

model User {
  id                String              @id @default(cuid())
  organizationId    String
  email             String              @unique
  role              UserRole            @default(MEMBER)
  incidents         Incident[]          @relation("UserIncidents")
  maintenances      Maintenance[]       @relation("UserMaintenances")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  IncidentUpdate    IncidentUpdate[]
  MaintenanceUpdate MaintenanceUpdate[]
  clerkUserId       String

  @@index([organizationId])
}

enum UserRole {
  ADMIN
  MEMBER
}

model Service {
  id             String        @id @default(cuid())
  organizationId String
  name           String @unique
  description    String?
  status         ServiceStatus @default(OPERATIONAL)
  incidents      Incident[]
  maintenances   Maintenance[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([organizationId])
}

model Incident {
  id          String           @id @default(cuid())
  serviceId   String
  service     Service          @relation(fields: [serviceId], references: [id])
  organizationId String
  reporterId  String
  reporter    User             @relation("UserIncidents", fields: [reporterId], references: [id])
  title       String
  description String?
  status      IncidentStatus   @default(INVESTIGATING)
  impact      IncidentImpact   @default(MINOR)
  updates     IncidentUpdate[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([serviceId])
  @@index([reporterId])
}

model IncidentUpdate {
  id         String         @id @default(cuid())
  incidentId String
  incident   Incident       @relation(fields: [incidentId], references: [id])
  updaterId  String
  updater    User           @relation(fields: [updaterId], references: [id])
  status     IncidentStatus
  message    String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@index([incidentId])
  @@index([updaterId])
}

model Maintenance {
  id                 String              @id @default(cuid())
  serviceId          String
  service            Service             @relation(fields: [serviceId], references: [id])
  creatorId          String
  creator            User                @relation("UserMaintenances", fields: [creatorId], references: [id])
  title              String
  description        String?
  status             MaintenanceStatus   @default(SCHEDULED)
  scheduledStartTime DateTime
  scheduledEndTime   DateTime
  updates            MaintenanceUpdate[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@index([serviceId])
  @@index([creatorId])
}

model MaintenanceUpdate {
  id            String            @id @default(cuid())
  maintenanceId String
  maintenance   Maintenance       @relation(fields: [maintenanceId], references: [id])
  updaterId     String
  updater       User              @relation(fields: [updaterId], references: [id])
  status        MaintenanceStatus
  message       String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([maintenanceId])
  @@index([updaterId])
}

enum ServiceStatus {
  OPERATIONAL
  DEGRADED_PERFORMANCE
  PARTIAL_OUTAGE
  MAJOR_OUTAGE
  UNDER_MAINTENANCE
}

enum IncidentStatus {
  INVESTIGATING
  IDENTIFIED
  MONITORING
  RESOLVED
}

enum IncidentImpact {
  MINOR
  MAJOR
  CRITICAL
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
